# Task ID: 3
# Title: Implement File Loading and Validation
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the core logic for loading an Excel/CSV/TSV file and validating its type and size.
# Details:
Create a function or class to handle file uploads. Check file extension (`.xlsx`, `.csv`, `.tsv`). Implement size check (<10MB). Raise appropriate errors for invalid files.

# Test Strategy:
Test with valid and invalid file types/sizes. Ensure correct errors are raised.

# Subtasks:
## 1. Implement File Upload Handling [done]
### Dependencies: None
### Description: Set up the core functionality to receive and process the uploaded file data from the input source.
### Details:
Define the interface or function signature for receiving the file. Handle temporary storage or in-memory representation of the file data.

## 2. Add File Size Validation [done]
### Dependencies: 3.1
### Description: Implement a check to ensure the uploaded file's size does not exceed the specified limit of 10MB.
### Details:
Access the file size property from the received file data and compare it against the 10MB threshold (10 * 1024 * 1024 bytes).

## 3. Add File Extension Validation [done]
### Dependencies: 3.1
### Description: Implement a check to verify that the file extension is one of the allowed types: .xlsx, .csv, or .tsv.
### Details:
Extract the file extension from the filename and compare it against the list of allowed extensions (case-insensitive).

## 4. Implement Specific Error Handling [done]
### Dependencies: 3.2, 3.3
### Description: Define and raise distinct, specific error types for invalid file size and invalid file extension validation failures.
### Details:
Create custom exception classes (e.g., InvalidFileSizeError, InvalidFileExtensionError) or use specific error codes. Integrate error raising into the validation logic implemented in steps 2 and 3.

