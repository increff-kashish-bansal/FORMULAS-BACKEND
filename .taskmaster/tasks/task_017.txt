# Task ID: 17
# Title: Add Option for Live Formula Translation
# Status: pending
# Dependencies: 9
# Priority: low
# Description: Add an option to the code generation to keep formulas 'live' via `xlcalculator` calls instead of static translation.
# Details:
Introduce a flag (CLI/API parameter) that, when enabled, forces all formula translations to use `evaluator.evaluate()` calls in the generated script, even for simple formulas.

# Test Strategy:
Generate code with the 'live formula' option enabled. Verify all formulas are translated to `evaluator.evaluate()` calls.

# Subtasks:
## 1. Add force_evaluator option to API and CLI [pending]
### Dependencies: None
### Description: Modify the backend API request schema and the CLI argument parser to accept a new boolean option, e.g., `force_evaluator_evaluation`, which signals whether to force evaluation via `xlcalculator.evaluator.evaluate()`.
### Details:
Define the new parameter name, type (boolean), default value (false), and add necessary documentation or help text for both API and CLI interfaces.

## 2. Implement conditional code generation based on force_evaluator option [pending]
### Dependencies: 17.1
### Description: Update the code generation logic in the backend to check the value of the `force_evaluator_evaluation` option. If true, modify the formula translation process to generate code that explicitly uses `xlcalculator.evaluator.evaluate()` for all formulas, bypassing static translation attempts.
### Details:
Adjust the relevant code generation modules to incorporate the conditional logic. Ensure that the generated Python script correctly utilizes the evaluator calls when the option is enabled.

