# Task ID: 16
# Title: Implement Cross-Sheet Reference Support
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Implement support for cross-sheet references during parsing and code generation.
# Details:
Ensure `xlcalculator` correctly handles references like `Sheet2!A1`. The code generation should correctly reference variables from other sheets, potentially requiring careful ordering based on dependencies.

# Test Strategy:
Use a test workbook with cross-sheet references. Verify `xlcalculator` evaluates them correctly and the generated code handles them.

# Subtasks:
## 1. Implement Cross-Sheet Reference Parsing [pending]
### Dependencies: None
### Description: Modify the lexer and parser components to correctly identify and parse cell references that include a sheet name prefix (e.g., 'Sheet2!A1').
### Details:
Update grammar rules and parsing logic to handle the 'SheetName!' syntax. Ensure the sheet name and cell reference are captured as distinct parts of the parsed structure.

## 2. Update Internal Representation for Cross-Sheet Links [pending]
### Dependencies: 16.1
### Description: Modify internal data structures (like the Abstract Syntax Tree or dependency graph) to store and represent the cross-sheet dependencies identified during parsing.
### Details:
Update AST nodes or cell objects to hold sheet name information for references. Extend the dependency graph to include edges between cells located on different sheets.

## 3. Modify Code Generator for Cross-Sheet Access [pending]
### Dependencies: 16.2
### Description: Update the code generation logic to produce Python code that correctly accesses variables representing cells from other sheets based on the internal representation.
### Details:
Generate code that uses a structure (e.g., dictionary lookup by sheet name and cell reference) to access cell values from different sheets based on the information stored internally.

## 4. Implement Cross-Sheet Dependency Resolution and Ordering [pending]
### Dependencies: 16.2, 16.3
### Description: Develop logic to analyze the cross-sheet dependencies and determine the correct evaluation order of sheets and cells to ensure referenced values are available before they are needed.
### Details:
Implement topological sorting or similar algorithms on the cross-sheet dependency graph. Ensure the generated code execution flow respects this determined order for sheets and cells.

